#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standart, System and Third party
from rosbag import Bag
from queue import Queue
from ipfsapi import connect
from threading import Thread
from collections import namedtuple
from http.client import HTTPConnection
from tempfile import NamedTemporaryFile
from eth_account.messages import defunct_hash_message
from eth_account.account import Account
from web3 import Web3, HTTPProvider
from json import loads

# ROS
import rospy
from std_msgs.msg import String
from std_srvs.srv import Empty

# AIRA
from ipfs_common.msg import Multihash
from ethereum_common.msg import Address
from ethereum_common.signer import demand_hash
from robonomics_msgs.msg import Demand, Result
from robonomics_liability.msg import Liability
from robonomics_liability.srv import StartLiability, StartLiabilityRequest
from robonomics_liability.srv import FinishLiability, FinishLiabilityRequest

acl_abi = loads('[{"constant": false,"inputs": [{"name": "_member","type": "address"}],"name": "add","outputs": [],"payable": false,"stateMutability": "nonpayable","type": "function"},{"constant": false,"inputs": [{"name": "_member","type": "address"}],"name": "remove","outputs": [],"payable": false,"stateMutability": "nonpayable","type": "function"},{"constant": true,"inputs": [{"name": "","type": "address"}],"name": "isMember","outputs": [{"name": "","type": "bool"}],"payable": false,"stateMutability": "view","type": "function"},{"inputs": [{"name": "_owner","type": "address"}],"payable": false,"stateMutability": "nonpayable","type": "constructor"}]')

class WorkerNode:
    '''
      You need a queue to store any new liabilities while the CPS performs a task
    '''
    liability_queue = Queue()
    in_process = False

    # TODO: need an objective messages collector and empty objective (by new liability) starter
    def __init__(self):
        rospy.init_node('worker')
        rospy.loginfo('Launching worker node...')

        self.ipfs = connect('https://ipfs.infura.io', 5001)
        web3 = Web3(HTTPProvider('https://sidechain.aira.life/rpc'))
        self.acl = web3.eth.contract(abi=acl_abi, address=rospy.get_param('~acl_address'))

        '''
          Any new demand will be handled by CPS
        '''
        ## TODO: uncomment if you want to provide service free.
        #rospy.Subscriber('/liability/infochan/incoming/demand', Demand, self.on_new_demand)
        
        '''
          Simple result message publisher.
        '''
        self.result = rospy.Publisher('/liability/infochan/eth/signing/result', Result, queue_size=128)

        '''
          Any new liabilities for our CPS will be published to /liability/ready topic
        '''
        rospy.Subscriber('/liability/ready', Liability, self.on_new_liability)

        '''
          If you have a liability and the CPS isn't busy you get the new liability here
        '''
        rospy.Subscriber('next_liability', Liability, self.subscribe_and_start)

        self.next_liability = rospy.Publisher('next_liability', Liability, queue_size=128)

        rospy.wait_for_service('liability/finish')

        '''
          These are required services to start and finish a liability
        '''
        self.liability_proxy = namedtuple('liability_srvs_proxy', ['start', 'finish'])(
                                          rospy.ServiceProxy('liability/start', StartLiability),
                                          rospy.ServiceProxy('liability/finish', FinishLiability))

        rospy.loginfo('Worker node launched.')

    '''
      Simply store a new liability. See the next method below which is running in concurrent thread
    '''
    def on_new_liability(self, msg):
        self.liability_queue.put(msg)
        rospy.loginfo("Got new liability %s", msg.address)

    '''
      Do work for free and publish result message with request sender as liability contract.
    '''
    def on_new_demand(self, msg):
        rospy.loginfo('Incoming demand:\n%s', str(msg))
        if msg.model.multihash == rospy.get_param('~model'):
            # recover account of sender
            msg_hash = defunct_hash_message(demand_hash(msg))
            sender_account = Account.recoverHash(msg_hash, signature=msg.signature)
            rospy.loginfo('Demand sender: %s', sender_account)

            if self.acl.call().isMember(sender_account):
                # do work and pack IPFS hash to message 
                result_msg = self.make_result(sender_account, self.do_work())
                # publish result message
                self.result.publish(result_msg)
            else:
                rospy.logwarn('sender is not in ACL, skip')

    '''
      Continuous check weather there's a new liability and the CPS isn't busy
    '''
    def _process_liability_queue(self):
        while not rospy.is_shutdown() and not self.in_process:
            msg = self.liability_queue.get()
            self.next_liability.publish(msg)

    '''
      Any topics in objective would appear under /liability/eth_0x... prefix
      Here you register all necessary topics to callbacks and start the liability
    '''
    def subscribe_and_start(self, liability):
        rospy.loginfo('Starting process...')

        '''
          Register any topics you need to publish logs, data etc
        '''
        prefix = '/liability/eth_' + liability.address.address
        pub = rospy.Publisher(prefix+'/data', String, queue_size=128)

        '''
          Here you get a message from an objective's topic and perform some task
          After this you have to finish the liability
        '''
        def callback(task):
            rospy.loginfo('Got new tast: %s', task)

            result = self.do_work()
            pub.publish(result)
            rospy.loginfo('Worker works: {}'.format(result))

            self.liability_proxy.finish(liability.address.address, True)
            rospy.loginfo('Process complete.')
            self.in_process = False
        rospy.Subscriber(prefix + '/task', String, callback)

        self.in_process = True
        self.liability_proxy.start(liability.address.address)

    '''
      Make Result message
    '''
    def make_result(self, sender_account, data_msg):
        with NamedTemporaryFile(delete=False) as tmpfile:
            recorder = Bag(tmpfile.name, 'w')
            recorder.write('/data', data_msg)
            recorder.write('/id', String(data=str(self.ipfs.id())))
            recorder.close()

            msg = Result()
            msg.success = True
            msg.liability = Address()
            msg.liability.address = sender_account
            msg.result = Multihash()

            ipfs_response = self.ipfs.add(tmpfile.name)
            try:
                msg.result.multihash = ipfs_response['Hash']
            except TypeError:
                rospy.logwarn('IPFS add proceeding error: %s', ipfs_response[1]['Message'])
                msg.result.multihash = ipfs_response[0]['Hash']

            rospy.loginfo('Result hash: %s', msg.result.multihash)
            return msg 

    def do_work(self):
        ## PLACE YOUR WORKER CODE HERE
        # Get weather around mt. Fuji
        api_key = 'e4119cc38e611fcda8d9a03afde0eec4'
        c = HTTPConnection('api.openweathermap.org')
        c.request('GET', '/data/2.5/weather?q=Fuji,jp&appid='+api_key)
        res = c.getresponse()
        return String(data=res.read().decode('utf-8'))

    def spin(self):
        Thread(target=self._process_liability_queue, daemon=True).start()
        rospy.spin()

if __name__ == '__main__':
    WorkerNode().spin()
